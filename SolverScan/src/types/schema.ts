// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { Document } from "@blockflow-labs/utils";

export class TradeData {
  static entity = "TradeData";
  static schema = {
    id: { type: "String", index: true },
    protocolAddress: "string",
    owner: "string",
    sellToken: "string",
    buyToken: "string",
    sellAmount: "string",
    buyAmount: "string",
    solver: "string",
    liquiditySource: "string",
    feeAmount: "string",
    orderUid: "string",
    timeStamp: "string",
    transactionHash: "string",
    gasUsed: "string",
    gasCost: "string",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
    instanceId: { type: "String", index: true },
  };
}

export class SolverData {
  static entity = "SolverData";
  static schema = {
    id: { type: "String", index: true },
    solverAddress: "string",
    totalTransactions: "string",
    totalVolume: "string",
    averageVolume: "string",
    totalGasUsed: "string",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
    instanceId: { type: "String", index: true },
  };
}

export class LiqudityData {
  static entity = "LiqudityData";
  static schema = {
    id: { type: "String", index: true },
    target: "string",
    value: "string",
    selector: "string",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
    instanceId: { type: "String", index: true },
  };
}

export class BridgeDataSrc {
  static entity = "BridgeDataSrc";
  static schema = {
    id: { type: "String", index: true },
    transactionHashSrc: "string",
    from: "string",
    fromValue: "string",
    timestampSrc: "string",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
    instanceId: { type: "String", index: true },
  };
}

export class BridgeDataDest {
  static entity = "BridgeDataDest";
  static schema = {
    id: { type: "String", index: true },
    transactionHashDest: "string",
    to: "string",
    toValue: "string",
    solver: "string",
    solverGasCost: "string",
    timestampDest: "string",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
    instanceId: { type: "String", index: true },
  };
}

export class SolverAnalysis {
  static entity = "SolverAnalysis";
  static schema = {
    id: { type: "String", index: true },
    totalTransactions: "number",
    totalVolume: "string",
    averageVolume: "string",
    totalGasSpent: "string",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
    instanceId: { type: "String", index: true },
  };
}

export class Volumeforeachpair {
  static entity = "Volumeforeachpair";
  static schema = {
    id: { type: "String", index: true },
    frequency: "number",
    volume: "string",
    token1address: "string",
    token2address: "string",
    entityId: { type: "String", index: true },
    blocknumber: { type: "Number", index: true },
    chainId: { type: "String", index: true },
    instanceId: { type: "String", index: true },
  };
}

import { String } from "@blockflow-labs/utils";

export interface ITradeData extends Document {
  id: String;
  protocolAddress: string;
  owner: string;
  sellToken: string;
  buyToken: string;
  sellAmount: string;
  buyAmount: string;
  solver: string;
  liquiditySource: string;
  feeAmount: string;
  orderUid: string;
  timeStamp: string;
  transactionHash: string;
  gasUsed: string;
  gasCost: string;
  blocknumber: String;
  entityId: String;
  instanceId: String;
  chainId: String;
}

export interface ISolverData extends Document {
  id: String;
  solverAddress: string;
  totalTransactions: string;
  totalVolume: string;
  averageVolume: string;
  totalGasUsed: string;
  blocknumber: String;
  entityId: String;
  instanceId: String;
  chainId: String;
}

export interface ILiqudityData extends Document {
  id: String;
  target: string;
  value: string;
  selector: string;
  blocknumber: String;
  entityId: String;
  instanceId: String;
  chainId: String;
}

export interface IBridgeDataSrc extends Document {
  id: String;
  transactionHashSrc: string;
  from: string;
  fromValue: string;
  timestampSrc: string;
  blocknumber: String;
  entityId: String;
  instanceId: String;
  chainId: String;
}

export interface IBridgeDataDest extends Document {
  id: String;
  transactionHashDest: string;
  to: string;
  toValue: string;
  solver: string;
  solverGasCost: string;
  timestampDest: string;

  blocknumber: String;
  entityId: String;
  instanceId: String;
  chainId: String;
}

export interface ISolverAnalysis extends Document {
  id: String;
  totalTransactions: number;
  totalVolume: string;
  averageVolume: string;
  totalGasSpent: string;
  blocknumber: String;
  entityId: String;
  instanceId: String;
  chainId: String;
}

export interface IVolumeforeachpair extends Document {
  id: String;
  frequency: number;
  volume: string;
  token1address: string;
  token2address: string;
  blocknumber: String;
  entityId: String;
  instanceId: String;
  chainId: String;
}
